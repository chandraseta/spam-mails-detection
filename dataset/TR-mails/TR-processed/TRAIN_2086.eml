Re: asynchronous I/O (was Re: Gasp!)
Adam Beberg writes:
> On Tue, 3 Sep 2002, Kragen Sitaker wrote:
> > Unix acquired nonblocking I/O in the form of select() about 23 years
> > ago, and Solaris has had the particular aio_* calls we are discussing
> > for many years.
> 
> select() "scaling" is a joke at best, and I know you know that. poll() is
> only a bit better.
Not only do I know that, the post to which you were responding
explained that, with somewhat more detail than "a joke".  As you
should know, but evidently do not, poll() is not even "a bit better" ---
in fact, it is about an order of magnitude worse --- for dense file
descriptor sets, which is the normal case.  (Except on operating
systems where select() is not a system call but a library routine that
calls poll().)
> > Very few applications need the aio_* calls --- essentially only
> > high-performance RDBMS servers even benefit from them at all, and
> > most of those have been faking it fine for a while with multiple
> > threads or processes.  This just provides a modicum of extra
> > performance.
> 
> Wrong, it makes a huge difference in even what I consider small programs.
Why do not you explain this in more detail?
> > Although I do not have a copy of the spec handy, I think the aio_* APIs
> > come from the POSIX spec IEEE Std 1003.1-1990, section 6.7.9, which is
> > 13 years old, and which I think documented then-current practice.
> > They might be even older than that.
> 
> Yes, SGI has a patch to the linux kernel to implement the aio_ interfaces,
> but it is still not built in, who knows when it will be. The point is it is
> not portable in either case.
You originally said:
  Could it be? After 20 years without this feature UNIX finally
  catches up to Windows and has I/O that does not [sic] totally suck for
  nontrivial apps? No way!
The point --- my point, the point I was discussing; please do not try
to tell me you were trying to make a different point, because I do not
care --- is that you had no clue what you were talking about; Unix
has not been without this feature, and in fact has had it since you
were in elementary school, and operating systems without it do not
"totally suck for nontrivial apps".
For what it is worth, glibc has actually implemented the aio_* calls
for a while, just in a way that does not scale to large numbers of
concurrent I/O requests.  I find references to the glibc
implementation as far back as 1999 and glibc 2.1.1, and I could
probably find much earlier references if I had time:
http://sources.redhat.com/ml/libc-hacker/1999-12/msg00070.html
(more details at
http://www.atnf.csiro.au/people/rgooch/linux/docs/io-events.html;
details on the SGI patch are at
http://oss.sgi.com/projects/kaio/faq.html)
> > Unix has been multiprocess since 1969, and most Unix implementations
> > have supported multithreading for a decade or more.
> 
> And most UNIX is still kinda-sorta supporting the pthreads (POSIX)
> interface, each in their own 7/8 implementation. you are safe if you
> stick to the basics.
Your original complaint was that Unix did not do multithreading or
multiprogramming well.  Now that I have pointed out how obviously
idiotic that claim is, you have amended your complaint: now, although
individual Unixes do these things well, you complain that their
implementations are not entirely conformant with the POSIX threads
specification.  Well, that is probably true, but I have not written
pthreads programs in C much myself, so I cannot confirm it from my own
experience.  But, even if it is true, it is not a very good reason to
prefer Windows.
I am sure you can provide examples of bugs in particular threading
implementations.  Spare us.  Just shut up.
-- 
       Kragen Sitaker     
Edsger Wybe Dijkstra died in August of 2002.  The world has lost a great
man.  See http://advogato.org/person/raph/diary.html?start=252 and
http://www.kode-fu.com/geek/2002_08_04_archive.shtml for details.
